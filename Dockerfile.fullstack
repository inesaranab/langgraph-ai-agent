# Full-Stack Railway Dockerfile
# Serves both React frontend and FastAPI backend
FROM node:18-alpine AS frontend-builder

# Build the frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Python backend stage
FROM python:3.11-slim AS backend

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements_minimal.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements_minimal.txt

# Copy backend code
COPY backend/ ./backend/
COPY src/ ./src/

# Copy built frontend
COPY --from=frontend-builder /app/frontend/.next/standalone ./frontend/
COPY --from=frontend-builder /app/frontend/.next/static ./frontend/.next/static
COPY --from=frontend-builder /app/frontend/public ./frontend/public

# Configure nginx to serve frontend and proxy API to backend
COPY <<EOF /etc/nginx/sites-available/default
server {
    listen 8000;
    
    # Serve frontend
    location / {
        try_files \$uri \$uri/ @frontend;
    }
    
    location @frontend {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
    
    # Proxy API calls to FastAPI backend
    location /api/ {
        proxy_pass http://127.0.0.1:8001/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
    
    # Direct API calls (without /api prefix)
    location ~ ^/(health|chat|sessions|test) {
        proxy_pass http://127.0.0.1:8001\$request_uri;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}
EOF

# Set environment variables
ENV PYTHONPATH=/app/src:/app/backend:/app
ENV PORT=8000

# Create startup script
COPY <<'EOF' /app/start.sh
#!/bin/bash
set -e

echo "ðŸš€ Starting Full-Stack LangGraph AI Agent"

# Start FastAPI backend on port 8001
cd /app
uvicorn backend.main_minimal:app --host 127.0.0.1 --port 8001 &

# Start Next.js frontend on port 3000
cd /app/frontend
node server.js &

# Start nginx to serve everything on port 8000
nginx -g "daemon off;" &

# Wait for any process to exit
wait -n

# Exit with status of process that exited first
exit $?
EOF

RUN chmod +x /app/start.sh

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=10s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["/app/start.sh"]